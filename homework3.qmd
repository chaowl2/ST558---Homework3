---
title: "Homework 3"
format: html
editor: visual
---

## Task 1: Control Flow Practice

### Step 0

```{r}
# Load rda file
load("hw2_list.rda")
```

### Step 1

```{r}
# Creating new columns in both dataframes of vector length n
bp_list$treatment$status = character(nrow(bp_list$treatment))
bp_list$placebo$status = character(nrow(bp_list$placebo))
```

### Step 2

```{r}
# Fill status for treatment group
for (i in seq_len(nrow(bp_list$treatment))) {
  bp = bp_list$treatment$post_bp[i]
  
  if (is.na(bp)) {
    bp_list$treatment$status[i] = NA_character_
  } else if (bp <= 120) {
    bp_list$treatment$status[i] = "optimal"
  } else if (bp <= 130) {
    bp_list$treatment$status[i] = "borderline"
  } else {
    bp_list$treatment$status[i] = "high"
  }
}
```

### Step 3

```{r}
# Fill status for placebo group
for (i in seq_len(nrow(bp_list$placebo))) {
  bp = bp_list$placebo$post_bp[i]
  
  if (is.na(bp)) {
    bp_list$placebo$status[i] = NA_character_
  } else if (bp <= 120) {
    bp_list$placebo$status[i] = "optimal"
  } else if (bp <= 130) {
    bp_list$placebo$status[i] = "borderline"
  } else {
    bp_list$placebo$status[i] = "high"
  }
}
```

## Task 2: Function Writing

The function below:

1\) takes a list with two data frames (\`treatment\` and \`placebo\`),

2\) takes a descriptive statistic as a quoted string with default "`mean`",

3\) uses \`get(stat)\` to fetch the R function,

4\) computes the statistic on the \`pre_bp\`, \`post_bp\`, and \`diff_bp\` columns for both data frames,

5\) returns a named list of six values.

```{r}
# Returns a vector
summarize_bp_vec = function(lst, stat = "mean") {
  # get the function from the quoted string
  my_function = get(stat, mode = "function")
  
  groups = c("treatment", "placebo")
  columns = c("pre_bp", "post_bp", "diff_bp")
  
  out_vals = numeric(length(groups) * length(columns))
  out_names = character(length(out_vals))
  
  k = 0L
  for (g in groups) {
    for (col in columns) {
      k = k + 1L
      x = lst[[g]][[col]]
      out_vals[k] = my_function(x, na.rm = TRUE)
      # names
      out_names[k] = paste(g, sub("_bp$", "", col), stat, sep = "_")
    }
  }
  
  names(out_vals) = out_names
  out_vals
}
```

### Running function on bp_list

```{r}
res_mean <- summarize_bp_vec(bp_list)   # default 
res_var <- summarize_bp_vec(bp_list, stat = "var")
res_sd  <- summarize_bp_vec(bp_list, stat = "sd")
res_min <- summarize_bp_vec(bp_list, stat = "min")
res_max <- summarize_bp_vec(bp_list, stat = "max")
```

```{r}
res_mean
res_var
res_sd
res_min
res_max
```

```{r}
summary_tab = data.frame(
  measure = names(res_mean),
  mean = unname(res_mean),
  var  = unname(res_var[names(res_mean)]),
  sd   = unname(res_sd[names(res_mean)]),
  min  = unname(res_min[names(res_mean)]),
  max  = unname(res_max[names(res_mean)])
)
```

```{r, echo=FALSE}
# Robust build of the comparison table (base R, no tidyverse)

stats_list <- list(mean = res_mean, var = res_var, sd = res_sd, min = res_min, max = res_max)

# turn a named vector like "treatment_pre_mean" into a tidy data.frame
vec_to_df <- function(v, stat_name) {
  nm <- names(v)
  parts <- do.call(rbind, strsplit(nm, "_", fixed = TRUE))  # 3 columns: group, measure, stat
  data.frame(
    group   = parts[,1],
    measure = parts[,2],
    stat    = stat_name,
    value   = unname(v),
    stringsAsFactors = FALSE
  )
}

# stack all stats
long_df <- do.call(rbind, lapply(names(stats_list), function(s) vec_to_df(stats_list[[s]], s)))

# reshape wide: one row per (group, measure), columns = mean/var/sd/min/max
summary_tab <- reshape(long_df, idvar = c("group","measure"), timevar = "stat", direction = "wide")

# clean column names: value.mean -> mean, etc.
names(summary_tab) <- sub("^value\\.", "", names(summary_tab))

# make a single label column, order nicely
summary_tab$measure_label <- paste(summary_tab$group, summary_tab$measure, sep = "_")
summary_tab <- summary_tab[order(match(summary_tab$group, c("treatment","placebo")),
                                 match(summary_tab$measure, c("pre","post","diff"))),
                           c("measure_label","mean","var","sd","min","max")]
names(summary_tab)[1] <- "measure"

# optional rounding
summary_tab[-1] <- lapply(summary_tab[-1], function(x) if (is.numeric(x)) round(x, 2) else x)

summary_tab

```
